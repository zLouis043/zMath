
 -----------------------------------------------
|                   VECTORS                     |
 -----------------------------------------------

TEST: CREATE A NEW [VECTOR] {

   | [VECTOR 1] of size 4: {
   |	[ 1.000000, 2.000000, 3.000000, 4.000000 ]
   |  }

}

TEST: COPY FROM [VECTOR 1] TO [VECTOR 2] {

   | [VECTOR 2] of size 4: {
   |	[ 1.000000, 2.000000, 3.000000, 4.000000 ]
   |  }

}

TEST: SUM [VECTOR 1]AND [VECTOR 2] {

   | [SUM VECTOR] of size 4: {
   |	[ 2.000000, 4.000000, 6.000000, 8.000000 ]
   |  }

}

TEST: SUM [VECTOR 1] BY A SCALAR [2] {

   | [SUM VECTOR] of size 4: {
   |	[ 3.000000, 4.000000, 5.000000, 6.000000 ]
   |  }

}

TEST: SUBTRACT [VECTOR 1] AND [VECTOR 2] {

   | [SUB VECTOR] of size 4: {
   |	[ 0.000000, 0.000000, 0.000000, 0.000000 ]
   |  }

}

TEST: SUBTRACT [VECTOR 1] BY A SCALAR [2] {

   | [SUB VECTOR] of size 4: {
   |	[ -1.000000, 0.000000, 1.000000, 2.000000 ]
   |  }

}

TEST: MULTIPLY [VECTOR 1] AND [VECTOR 2] {

   | [PROD VECTOR] of size 4: {
   |	[ 1.000000, 4.000000, 9.000000, 16.000000 ]
   |  }

}

TEST: MULTIPLY [VECTOR 1] BY A SCALAR [2] {

   | [PROD VECTOR] of size 4: {
   |	[ 2.000000, 4.000000, 6.000000, 8.000000 ]
   |  }

}

TEST: DIVIDE [VECTOR 1] AND [VECTOR 2] {

   | [DIV VECTOR] of size 4: {
   |	[ 1.000000, 1.000000, 1.000000, 1.000000 ]
   |  }

}

TEST: DIVIDE [VECTOR 1] BY A SCALAR [2] {

   | [DIV VECTOR] of size 4: {
   |	[ 0.500000, 1.000000, 1.500000, 2.000000 ]
   |  }

}

TEST: RAISE THE [VECTOR 1] TO THE POWER OF [4] {

   | [RAISED VECTOR] of size 4: {
   |	[ 1.000000, 32.000000, 243.000000, 1024.000000 ]
   |  }

}

TEST: CREATE A NEW [VECTOR 8] ORTHOGONAL TO [VECTOR 1] {

   | [ORTHOGONAL VECTOR] of size 4: {
   |	[ -2.000000, 1.000000, -4.000000, 3.000000 ]
   |  }

}

TEST: CROSS PRODUCT BETWEEN [VECTOR 9] AND [VECTOR 10] {

   | [CROSS PRODUCT VECTOR] of size 3: {
   |	[ 22.000000, 8.000000, -15.000000 ]
   |  }

}

TEST: NORMALIZE [VECTOR 12] WITH MAGNITUDE OF [9.273619] AFTER COPING IT FROM [VECTOR 3] {

   | [NORMALIZED VECTOR] of size 4: {
   |	[ 0.323498, 0.431331, 0.539164, 0.646997 ]
   |  }

}

----------------------------------------------------------------

> Are [VECTOR 1] and [VECTOR 3] equal: False

> DOT PRODUCT:
   | DOT PRODUCT BETWEEN [VECTOR 1] and [VECTOR 3]: : {
   |	DOT: 50.000000;
   | }


> Are [VECTOR 1] and [VECTOR 8] orthogonal: True


> VECTOR MAGNITUDE:
   | MAGNITUDE OF [VECTOR 3] : {
   |	MAG: 9.273619;
   | }


> Is [VECTOR 12] normalized : True

 -----------------------------------------------
|                   MATRIXES                    |
 -----------------------------------------------


TEST: CREATE A NEW [MATRIX 1] {

   | [MATRIX 1] of size 2x4: {
   |		x                                               x   
   |		|   1.000000   2.000000   3.000000   4.000000   |
   |		|   5.000000   6.000000   7.000000   8.000000   |
   |		x                                               x   
   | }

}

TEST: CREATE A NEW [MATRIX 2] AS AN IDENTITY MATRIX OF DIM [6]{

   | [MATRIX 2] of size 3x3: {
   |		x                                    x   
   |		|   1.000000   0.000000   0.000000   |
   |		|   0.000000   1.000000   0.000000   |
   |		|   0.000000   0.000000   1.000000   |
   |		x                                    x   
   | }

}

TEST: COPY THE POINTER AND DIM FROM [MATRIX 1] TO [MATRIX 2] {

   | [MATRIX 2] of size 2x4: {
   |		x                                               x   
   |		|   1.000000   2.000000   3.000000   4.000000   |
   |		|   5.000000   6.000000   7.000000   8.000000   |
   |		x                                               x   
   | }

}

TEST: CONVERT [VECTOR 13] TO [MATRIX 3] {

   | [VECTOR 13] of size 3: {
   |	[ 1.000000, 2.000000, 3.000000 ]
   |  }



   | [MATRIX 3] of size 3x1: {
   |		x              x   
   |		|   1.000000   |
   |		|   2.000000   |
   |		|   3.000000   |
   |		x              x   
   | }

}

TEST: CONVERT [MATRIX 4] TO [VECTOR 14] {

   | [MATRIX 4] of size 3x3: {
   |		x                                    x   
   |		|   1.000000   0.000000   0.000000   |
   |		|   0.000000   1.000000   0.000000   |
   |		|   0.000000   0.000000   1.000000   |
   |		x                                    x   
   | }



   | [VECTOR 14] of size 9: {
   |	[ 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000 ]
   |  }

}

TEST: TAKE FROM [MATRIX 4] THE 2TH ROW {

   | [MATRIX 4] of size 3x3: {
   |		x                                    x   
   |		|   1.049593   0.689962   0.663717   |
   |		|   1.658315   0.125492   0.776086   |
   |		|   0.451918   0.188849   0.742271   |
   |		x                                    x   
   | }



   | [2TH ROW TAKEN FROM [MATRIX 4]] of size 3: {
   |	[ 1.658315, 0.125492, 0.776086 ]
   |  }

}

TEST: TAKE FROM [MATRIX 4] THE 3TH COL {

   | [MATRIX 4] of size 3x3: {
   |		x                                    x   
   |		|   1.049593   0.689962   0.663717   |
   |		|   1.658315   0.125492   0.776086   |
   |		|   0.451918   0.188849   0.742271   |
   |		x                                    x   
   | }



   | [3TH COL TAKEN FROM [MATRIX 4]] of size 3: {
   |	[ 0.663717, 0.776086, 0.742271 ]
   |  }

}

TEST: OPERATION BETWEEN [MATRIX 5] AND [MATRIX 6] INTO [MATRIX 7] {



   | [MATRIX 5] of size 3x3: {
   |		x                                    x   
   |		|   5.000000   5.000000   5.000000   |
   |		|   5.000000   5.000000   5.000000   |
   |		|   5.000000   5.000000   5.000000   |
   |		x                                    x   
   | }



   | [MATRIX 6] of size 3x3: {
   |		x                                    x   
   |		|   6.000000   6.000000   6.000000   |
   |		|   6.000000   6.000000   6.000000   |
   |		|   6.000000   6.000000   6.000000   |
   |		x                                    x   
   | }


OP: SUM BETWEEN [MATRIX 5] AND [MATRIX 6] INTO [MATRIX 7] {

   | [SUM MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   11.000000  11.000000  11.000000  |
   |		|   11.000000  11.000000  11.000000  |
   |		|   11.000000  11.000000  11.000000  |
   |		x                                    x   
   | }

}

OP: SUBTRACTION BETWEEN [MATRIX 5] AND [MATRIX 6] INTO [MATRIX 7] {

   | [SUB MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   -1.000000  -1.000000  -1.000000  |
   |		|   -1.000000  -1.000000  -1.000000  |
   |		|   -1.000000  -1.000000  -1.000000  |
   |		x                                    x   
   | }

}

OP: PRODUCT BETWEEN [MATRIX 5] AND [MATRIX 6] INTO [MATRIX 7] {

   | [PROD MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   90.000000  90.000000  90.000000  |
   |		|   90.000000  90.000000  90.000000  |
   |		|   90.000000  90.000000  90.000000  |
   |		x                                    x   
   | }

}

OP: DIVISION BETWEEN [MATRIX 5] AND [MATRIX 6] INTO [MATRIX 7] {

   | [DIV MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   0.833333   0.833333   0.833333   |
   |		|   0.833333   0.833333   0.833333   |
   |		|   0.833333   0.833333   0.833333   |
   |		x                                    x   
   | }

}


OP: HADAMARD PRODUCT BETWEEN [MATRIX 5] AND [MATRIX 6] INTO [MATRIX 7] {

   | [PRODUCT ELEMENT BY ELEMENT] of size 3x3: {
   |		x                                    x   
   |		|   30.000000  30.000000  30.000000  |
   |		|   30.000000  30.000000  30.000000  |
   |		|   30.000000  30.000000  30.000000  |
   |		x                                    x   
   | }

}

}

TEST: TRANSPOSE [MATRIX 8] {

   | [MATRIX 8] of size 3x3: {
   |		x                                    x   
   |		|   1.574389   1.034944   0.995575   |
   |		|   2.487472   0.188238   1.164129   |
   |		|   0.677877   0.283273   1.113407   |
   |		x                                    x   
   | }



   | [TRANSPOSED MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   1.574389   2.487472   0.677877   |
   |		|   1.034944   0.188238   0.283273   |
   |		|   0.995575   1.164129   1.113407   |
   |		x                                    x   
   | }

}

TEST: [MATRIX 9] TO ROW ECHELON FORM {

   | [MATRIX 9] of size 3x3: {
   |		x                                    x   
   |		|   1.000000   -1.000000  -1.000000  |
   |		|   4.000000   1.000000   0.000000   |
   |		|   -1.000000  -1.000000  -4.000000  |
   |		x                                    x   
   | }



   | [CONVERTED MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   1.000000   -1.000000  -1.000000  |
   |		|   3.000000   1.000000   0.500000   |
   |		|   -5.000000  -1.000000  1.000000   |
   |		x                                    x   
   | }

}

TEST: APPEND [VECTOR 17] TO [MATRIX 12] {

   | [MATRIX 10] of size 3x3: {
   |		x                                    x   
   |		|   1.000000   -1.000000  -1.000000  |
   |		|   4.000000   1.000000   0.000000   |
   |		|   -1.000000  -1.000000  -4.000000  |
   |		x                                    x   
   | }



   | [VECTOR TO APPEND] of size 3: {
   |	[ 7.000000, 7.000000, 7.000000 ]
   |  }



   | [EXPANDED MATRIX] of size 3x4: {
   |		x                                               x   
   |		|   1.000000   -1.000000  -1.000000  7.000000   |
   |		|   4.000000   1.000000   0.000000   7.000000   |
   |		|   -1.000000  -1.000000  -4.000000  7.000000   |
   |		x                                               x   
   | }

}

TEST: APPEND [MATRIX 13] TO [MATRIX 14] {

   | [MATRIX 13] of size 3x4: {
   |		x                                               x   
   |		|   -2.000000  1.000000   1.000000   1.000000   |
   |		|   -2.000000  -3.000000  1.000000   1.000000   |
   |		|   -2.000000  0.000000   1.000000   -2.000000  |
   |		x                                               x   
   | }



   | [MATRIX TO APPEND] of size 3x3: {
   |		x                                    x   
   |		|   3.000000   -1.000000  1.000000   |
   |		|   0.000000   -1.000000  2.000000   |
   |		|   3.000000   5.000000   0.000000   |
   |		x                                    x   
   | }



   | [EXPANDED MATRIX] of size 3x7: {
   |		x                                                                                x   
   |		|   -2.000000  1.000000   1.000000   1.000000   3.000000   -1.000000  1.000000   |
   |		|   -2.000000  -3.000000  1.000000   1.000000   0.000000   -1.000000  2.000000   |
   |		|   -2.000000  0.000000   1.000000   -2.000000  3.000000   5.000000   0.000000   |
   |		x                                                                                x   
   | }

}

TEST: DETERMINANT OF [MATRIX 13] {

   | [MATRIX 15] of size 3x3: {
   |		x                                    x   
   |		|   -2.000000  -2.000000  0.000000   |
   |		|   -1.000000  2.000000   -1.000000  |
   |		|   -2.000000  2.000000   3.000000   |
   |		x                                    x   
   | }

   | THE DETERMINANT OF [MATRIX 15] IS : {
   |	DET: -26.000000;
   | }

}

TEST: INVERSE OF [MATRIX 14] {

   | [MATRIX 14] of size 3x3: {
   |		x                                    x   
   |		|   2.000000   2.000000   4.000000   |
   |		|   3.000000   3.000000   3.000000   |
   |		|   2.000000   3.000000   4.000000   |
   |		x                                    x   
   | }



   | [INVERTED MATRIX] of size 3x3: {
   |		x                                    x   
   |		|   0.500000   0.666667   -1.000000  |
   |		|   -1.000000  0.000000   1.000000   |
   |		|   0.500000   -0.333333  0.000000   |
   |		x                                    x   
   | }

}
